# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-nodejs # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE: "aws-nodejs"
  iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - "sns:Publish"
        Resource:
          - "*"

      - Effect: 'Allow'
        Action:
          - 'sqs:*'
        Resource:
          - "*"
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"


# you can add statements to the Lambda function's IAM Role here

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: api/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: api/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: api/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: api/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: api/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

 Value: "Some output value"
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: false

